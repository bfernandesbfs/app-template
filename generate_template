#!/bin/bash

set -e
set -o pipefail

# Echoes help text
echo_help() {
    echo "This is a shell script to transform the PRODUCTNAME directory into a cookie-cutter template"
    echo
    echo "Options accepted by generate_template"
    echo
    echo "Commands:"
    echo "      -verbose             Prints more verbose output"
    echo "      -skip-regeneration   Does not alter the generated cookiecutter template"
    echo "      -template-test       Perform tests after generating template"
}

if [[ ! "${@#-help}" = "$@" ]]
then
    echo_help
    exit 0
fi

# Run this script in its own directory
SCRIPT_DIR="$(dirname $0)"
cd $SCRIPT_DIR

echo "Regenerating cookiecutter template from PRODUCTNAME directory contents..."

#This is the only lookup that is done on filenames
LOOKUP="PRODUCTNAME"
EXPANDED="{{ cookiecutter.project_name | replace(' ', '') }}"

# Clear out any left over artifacts from last regeneration
if [[ "${@#-skip-regeneration}" = "$@" ]]
then
    echo "Deleting old template output..."
    rm -rf "${EXPANDED}/"
    echo "Regenerating template..."
else
    echo "Performing dry run on existing template output..."
fi

# Make the tree
find ./PRODUCTNAME -type d | while read FILE
do
    NEWFILE=`echo $FILE | sed -e "s/${LOOKUP}/${EXPANDED}/g"`
    MKDIR_CMD="mkdir -p \"$NEWFILE\""

    if [[ ! "${@#-verbose}" = "$@" ]]
    then
        echo "${MKDIR_CMD}"
    fi

    if [[ "${@#-skip-regeneration}" = "$@" ]]
    then
        eval $MKDIR_CMD
    fi
done

# Copy the files over
find ./PRODUCTNAME -type f | while read FILE
do
    NEWFILE=`echo $FILE | sed -e "s/${LOOKUP}/${EXPANDED}/g"`
    COPY_CMD="cp \"$FILE\" \"$NEWFILE\""

    if [[ ! "${@#-verbose}" = "$@" ]]
    then
        echo "${COPY_CMD}"
    fi

    if [[ "${@#-skip-regeneration}" = "$@" ]]
    then
        eval $COPY_CMD
    fi
done

# Do replacements
function replace {
    grep -rl $1 ./PRODUCTNAME | while read FILE
    do
    NEWFILE=`echo $FILE | sed -e "s/${LOOKUP}/${EXPANDED}/g"`
        SED_CMD="LC_ALL=C sed -e \"s/$1/$2/g\" \"$NEWFILE\" > t1 && mv t1 \"$NEWFILE\""
        # Copy over incase the sed fails due to encoding
        #echo "echo \"$FILE\""
        
        if [[ ! "${@#-verbose}" = "$@" ]]
        then
            echo "${SED_CMD}"
        fi
        
        if [[ "${@#-skip-regeneration}" = "$@" ]]
        then
            eval $SED_CMD
        fi
    done
}

replace "PRODUCTNAME" "{{ cookiecutter.project_name | replace(' ', '') }}"
replace "DISPLAYNAME" "{{ cookiecutter.display_name }}"
replace "com.identifier" "{{ cookiecutter.bundle_identifier }}"

if [[ ! "${@#-skip-regeneration}" = "$@" ]]
then
    echo "Dry run complete."
else
    # Delete files that we don't want to include in the template
    rm -rf "${EXPANDED}/app/build"
    rm -rf "${EXPANDED}/app/fastlane/build"
    rm -rf "${EXPANDED}/app/fastlane/screenshots"
    echo "Template generation complete."
fi

# Run Tests

if [[ ! "${@#-template-test}" = "$@" ]]
then
    echo "Running tests..."

    # cookiecutter default output dir is ProjectName
    TEST_OUTPUT_DIR="ProjectTest"
    cookiecutter --no-input --overwrite-if-exists ./

    pushd "$TEST_OUTPUT_DIR"
        bundle install
        echo "Add here test command"
    popd

    echo "Tests complete. Output kept in ${TEST_OUTPUT_DIR}"
else
    echo "Skipping template tests..."
fi